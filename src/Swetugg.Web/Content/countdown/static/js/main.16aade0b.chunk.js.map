{"version":3,"sources":["components/timer/timerInput.tsx","components/timer/timerOutput.tsx","components/timer/timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TimerInput","props","checkboxToggle","setState","timerStatus","state","setSessionLength","event","sessionLength","parseInt","currentTarget","value","setWarning","minuteWarning","stringTime","hours","minutes","currentTime","Date","keepValues","sessionEnd","getHours","toString","getMinutes","Math","floor","length","DefaultLength","defaultWarning","handleChange","bind","handleClick","id","this","checked","time","values","split","setHours","setMinutes","setSeconds","WhenDone","className","htmlFor","mask","type","onChange","aria-describedby","placeholder","defaultChecked","onClick","Component","timerOutput","interval","sessionEndTime","endTime","timeLeft","showTimer","warning","sessionStarted","transitionState","stopTimer","getTime","diff","round","console","log","setTimeout","calculateTime","setInterval","clearInterval","abort","timeUntilStart","aria-label","aria-hidden","PureComponent","timer","hasInput","abortPressed","switchState","sessionWarning","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16aade0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport InputMask from 'react-input-mask';\nimport '../../App.css';\n\ninterface iProps { DefaultLength: number, defaultWarning: number, sessionEnd: Date,  WhenDone: (sessionEnd: Date, sessionLength:number, sessionWarning: number, showTimer: boolean) => void, keepValues:boolean}\ninterface iState { sessionEnd: string, sessionLength: number, timerStatus: boolean, minuteWarning: any,}\n\nexport class TimerInput extends Component<iProps, iState> {\n    constructor(props:iProps){\n        super(props);\n        var currentTime = new Date();\n        var stringTime = '';\n\n        var hours:string;\n        var minutes:string;\n        if (this.props.keepValues) {\n          hours=(this.props.sessionEnd.getHours()).toString();\n          minutes=(this.props.sessionEnd.getMinutes()).toString();\n        }\n        else{\n          hours = (currentTime.getHours()+1).toString();\n          minutes = (Math.floor(currentTime.getMinutes()/10)*10).toString();\n        }\n        if(hours.length < 2) hours = \"0\" + hours;\n        if(minutes.length < 2) minutes = \"0\" + minutes;\n        stringTime= hours + \":\" + minutes;\n\n        this.state={\n            sessionEnd: stringTime,\n            sessionLength: props.DefaultLength,\n            timerStatus: true,\n            minuteWarning: props.defaultWarning        \n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleChange(event: React.FormEvent<HTMLInputElement>){\n      // console.log(event.target);\n      switch (event.currentTarget.id) {\n        case \"endTime\":\n            this.setState({sessionEnd: event.currentTarget.value });          \n          break;\n          case \"sessionLength\":\n            this.setState({sessionLength: parseInt(event.currentTarget.value) });          \n          break;\n          case \"timeWarning\":\n            this.setState({minuteWarning: event.currentTarget.value });          \n          break;\n          case \"showTimer\":\n            this.setState({timerStatus: event.currentTarget.checked });          \n          break;\n      \n        default:\n          break;\n      }\n\n    }\n\n    handleClick(){\n      var time = new Date();\n      var values = this.state.sessionEnd.split(':');\n      time.setHours(parseInt(values[0]));\n      time.setMinutes(parseInt(values[1]));\n      time.setSeconds(0);\n      this.props.WhenDone(time, this.state.sessionLength, this.state.minuteWarning, this.state.timerStatus); \n    }\n\n    checkboxToggle=()=>{\n      this.setState({timerStatus:!this.state.timerStatus});  \n    }\n\n    setSessionLength=(event: React.FormEvent<HTMLInputElement>)=>{\n      this.setState({ sessionLength: parseInt(event.currentTarget.value)});\n    }\n\n    setWarning=(event: React.FormEvent<HTMLInputElement>)=>{\n      this.setState({minuteWarning: parseInt(event.currentTarget.value)});\n    }\n\n    render() {\n      \n        return (\n                <form>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"endTime\">Session End Time</label>\n\n                    <small id=\"sessionEnd\" className=\"form-text text-muted\">\n                      Enter when the sessions should end\n                    </small>\n                    <InputMask\n                      mask=\"99:99\"\n                      type=\"text\"\n                      value={this.state.sessionEnd}\n                      onChange={this.handleChange}\n                      className=\"form-control\"\n                      id=\"endTime\"\n                      aria-describedby=\"timeHelp\"\n                      placeholder=\"Enter time\"\n                    />\n\n                    <small id=\"length\" className=\"form-text text-muted\">\n                      Set session length in minutes\n                    </small>\n                    <InputMask\n                      mask=\"99\"\n                      type=\"text\"\n                      value={this.state.sessionLength}\n                      onChange={this.handleChange}\n                      className=\"form-control\"\n                      id=\"sessionLength\"\n                      aria-describedby=\"sessionLength\"\n                      placeholder=\"Enter length\"\n                    />\n\n                    <small id=\"warning\" className=\"form-text text-muted\">\n                      When would you like to get the time warning?\n                    </small>\n                    <InputMask\n                      mask=\"99\"\n                      type=\"text\"\n                      value={this.state.minuteWarning}\n                      onChange={this.handleChange}\n                      className=\"form-control\"\n                      id=\"timeWarning\"\n                      aria-describedby=\"timeWarning\"\n                      placeholder=\"Enter time\"\n                    />\n\n                    <input\n                      type=\"checkbox\"\n                      onChange={this.handleChange}\n                      id=\"showTimer\"\n                      defaultChecked={this.state.timerStatus}\n                      className=\"chkbox-timer\"\n                    />\n                    <label htmlFor=\"showTimer\">Show timer</label>\n                  </div>\n\n                  <button\n                    type=\"button\"\n                    onClick={this.handleClick}\n                    className=\"btn btn-primary\"\n                  >\n                    Start Countdown!\n                  </button>\n                </form>\n        );\n    }\n}\n\nexport default TimerInput\n","import React, { PureComponent } from 'react';\nimport '../../App.css';\n\ninterface iProps { timeLeft: Date, sessionEndTime: Date, showTimer:boolean, warning:number, abort:boolean }\ninterface iState { sessionLength: number, sessionEndTime: Date, timeLeft: number, showTimer:boolean, minuteWarning:number, sessionStarted:boolean, className:string, transitionState:string }\nexport class timerOutput extends PureComponent <any, iState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            sessionLength: this.props.length,\n            sessionEndTime: this.props.endTime,\n            timeLeft: 0,\n            showTimer:this.props.showTimer,\n            minuteWarning:this.props.warning,\n            sessionStarted:false,\n            className: 'card cardWaiting',\n            transitionState: ''\n        }\n        this.showTimer = this.showTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n\n        //debugger;\n\n        // console.log({Length: this.state.sessionLength, EndTime: this.state.sessionEndTime})\n    }\n\n    interval:any = 0;\n    \n    endTime(event:Date){\n        this.setState({sessionEndTime: event})\n    }\n\n    calculateTime(){\n        const currentTime= new Date().getTime();\n        const endTime = this.state.sessionEndTime.getTime();\n\n        var diff= endTime - currentTime;\n        var timeLeft = Math.round((diff / (1000 * 60)) % 60) + (Math.floor((diff / (1000 * 60 * 60)) % 24)*60);\n        var sessionStarted = (timeLeft<=this.state.sessionLength);\n\n        var className = 'card cardWaiting';\n        var transitionState = '';\n        //debugger;\n        if (timeLeft <= this.state.minuteWarning && sessionStarted) {\n            className = 'card cardWarning';\n            console.log(\"card cardWarning\");\n        }\n        else if (sessionStarted) {\n            className = 'card cardActive';\n            console.log(\"card cardActive\");\n        }\n        else if (timeLeft <= 0) {\n            className = 'card cardEnd';\n            console.log(\"card cardEnd\");\n            this.stopTimer();\n        }\n\n        if (this.state.timeLeft !== timeLeft){\n            transitionState = 'fadeIn';\n        }\n        // console.log({ timeLeft: timeLeft, warning: this.state.minuteWarning, sessionStarted: sessionStarted, className: className });\n        this.setState({ timeLeft: timeLeft, sessionStarted: (timeLeft<=this.state.sessionLength), className: className, transitionState: transitionState });\n\n        setTimeout(() => {\n            this.setState({transitionState: ''})\n        }, 500);\n    }\n\n    componentDidMount(){\n        this.calculateTime();\n        this.interval = setInterval(() => {\n            this.calculateTime();\n        }, 10000);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.interval);\n    }\n\n    stopTimer(){\n        this.props.abort(false);\n    }\n\n    showTimer(){\n        if(this.state.showTimer) return;\n        this.setState({showTimer: true});\n        setTimeout(() => {\n            this.setState({showTimer: false});\n        },2000);\n    }\n\n    render() {\n        var timeUntilStart=this.state.timeLeft-this.state.sessionLength;\n        \n        return (\n            <div className={this.state.className} onClick={this.showTimer}>\n                <div>\n                    <button type=\"button\" className=\"close\" onClick={this.stopTimer} aria-label=\"Close\">\n                        <span className=\"display-4\" aria-hidden=\"true\">&times;&nbsp;</span>\n                    </button>\n                </div>\n\n                {this.state.sessionStarted?\n                    <div className={'bigText ' + this.state.transitionState}>                    \n                        {this.state.showTimer? this.state.timeLeft : null}\n                    </div>\n                    :\n                    <div>\n                        <div className={'bigText ' + this.state.transitionState}>\n                            - {timeUntilStart}\n                        </div>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default timerOutput\n","import React, { Component } from 'react'\nimport TimerInput from './timerInput'\nimport TimerOutput from './timerOutput'\nimport '../../App.css'\n// import {flipInX} from 'react-animations';\ninterface iState{ sessionLength:number, hasInput:boolean, sessionEndTime:Date, showTimer:boolean, minuteWarning:number, abortPressed:boolean }\n\n\nexport class timer extends Component <any, iState>{\n    constructor(props:{}){\n        super(props);\n        this.state={\n          hasInput: false,\n          sessionLength: 50,\n          sessionEndTime: new Date(),\n          showTimer: false,\n          minuteWarning: 15,\n          abortPressed: false\n        }\n        this.switchState=this.switchState.bind(this);\n    }\n\n    switchState(sessionEnd: Date, sessionLength:number, sessionWarning: number, showTimer: boolean):void {\n      //debugger;\n      this.setState({hasInput: true, sessionEndTime: sessionEnd, sessionLength: sessionLength, showTimer: showTimer, minuteWarning: sessionWarning});\n    }\n\n    // timerStatus=(timerStatus: boolean)=>{\n    //   this.setState({showTimer:timerStatus});\n    // }\n\n    // sessionLength=(length: number)=>{\n    //   this.setState({sessionLength:length});\n    // }\n\n    // setWarning=(warning: number)=>{\n    //   this.setState({minuteWarning:warning})\n    // }\n\n    stopTimer=()=>{\n      this.setState({hasInput:false, abortPressed: true});\n    }\n    \n    render() {\n      \n        return (\n          <div className=\"transition\">\n            {this.state.hasInput ? \n              <TimerOutput length={this.state.sessionLength} endTime={this.state.sessionEndTime} showTimer={this.state.showTimer} warning={this.state.minuteWarning} abort={this.stopTimer}/> \n              : <TimerInput DefaultLength={this.state.sessionLength} defaultWarning={this.state.minuteWarning} WhenDone={this.switchState} sessionEnd={this.state.sessionEndTime} keepValues={this.state.abortPressed} /> }\n          </div>\n        )\n    }\n}\n\nexport default timer\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Timer from './components/timer/timer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"card\">\n        <div className=\"card-header\"><img src=\"images/SwetuggButterflyLogoGreyLarge.png\" alt=\"Swetugg logo\" className=\"logo\"/></div>\n        <Timer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}